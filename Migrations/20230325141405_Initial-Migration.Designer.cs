// <auto-generated />
using System;
using AlimBio.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AlimBio.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230325141405_Initial-Migration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AlimBio.Models.Entreprise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdresseComplet")
                        .HasColumnType("longtext");

                    b.Property<float?>("Capital")
                        .HasColumnType("float");

                    b.Property<string>("CodePostal")
                        .HasColumnType("longtext");

                    b.Property<string>("ComplementAdresse")
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("DateCreation")
                        .HasColumnType("date");

                    b.Property<string>("DescriptionActivite")
                        .HasColumnType("longtext");

                    b.Property<int?>("Effectif")
                        .HasColumnType("int");

                    b.Property<bool?>("EntrepriseEmployeuse")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImmatriculationTva")
                        .HasColumnType("longtext");

                    b.Property<string>("InscritRcs")
                        .HasColumnType("longtext");

                    b.Property<string>("Langitude")
                        .HasColumnType("longtext");

                    b.Property<string>("Lattitude")
                        .HasColumnType("longtext");

                    b.Property<string>("LibelleVoie")
                        .HasColumnType("longtext");

                    b.Property<string>("Nic")
                        .HasColumnType("longtext");

                    b.Property<string>("NomEntreprise")
                        .HasColumnType("longtext");

                    b.Property<string>("NumeroVoie")
                        .HasColumnType("longtext");

                    b.Property<bool?>("PersonneMoral")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Region")
                        .HasColumnType("longtext");

                    b.Property<string>("Siren")
                        .HasColumnType("longtext");

                    b.Property<string>("SiretSiege")
                        .HasColumnType("longtext");

                    b.Property<string>("SiteWeb")
                        .HasColumnType("longtext");

                    b.Property<string>("Ville")
                        .HasColumnType("longtext");

                    b.Property<int?>("VilleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VilleId");

                    b.ToTable("Entreprises");
                });

            modelBuilder.Entity("AlimBio.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("longtext");

                    b.Property<int?>("SalarieId")
                        .HasColumnType("int");

                    b.Property<string>("Sujet")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("SalarieId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("AlimBio.Models.Salarie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Adresse")
                        .HasColumnType("longtext");

                    b.Property<string>("CodePostal")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<int?>("EntrepriseId")
                        .HasColumnType("int");

                    b.Property<string>("Fix")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<string>("Mobile")
                        .HasColumnType("longtext");

                    b.Property<string>("Nom")
                        .HasColumnType("longtext");

                    b.Property<string>("Pays")
                        .HasColumnType("longtext");

                    b.Property<string>("Poste")
                        .HasColumnType("longtext");

                    b.Property<string>("Prenom")
                        .HasColumnType("longtext");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("Ville")
                        .HasColumnType("longtext");

                    b.Property<int?>("VilleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SiteId");

                    b.HasIndex("VilleId");

                    b.ToTable("Salaries");
                });

            modelBuilder.Entity("AlimBio.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Couleur")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int?>("EntrepriseId")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext");

                    b.Property<string>("NomService")
                        .HasColumnType("longtext");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("SiteId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("AlimBio.Models.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Adresse")
                        .HasColumnType("longtext");

                    b.Property<string>("Capital")
                        .HasColumnType("longtext");

                    b.Property<string>("DateCreation")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Effectif")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<int?>("EntrepriseId")
                        .HasColumnType("int");

                    b.Property<string>("Langitude")
                        .HasColumnType("longtext");

                    b.Property<string>("Largitude")
                        .HasColumnType("longtext");

                    b.Property<string>("NomSite")
                        .HasColumnType("longtext");

                    b.Property<string>("NombreEmployees")
                        .HasColumnType("longtext");

                    b.Property<string>("Siret")
                        .HasColumnType("longtext");

                    b.Property<string>("SiteWeb")
                        .HasColumnType("longtext");

                    b.Property<string>("Statut")
                        .HasColumnType("longtext");

                    b.Property<string>("Tel")
                        .HasColumnType("longtext");

                    b.Property<string>("TypeSite")
                        .HasColumnType("longtext");

                    b.Property<int?>("VilleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("VilleId");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("AlimBio.Models.Ville", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CodePostal")
                        .HasColumnType("longtext");

                    b.Property<string>("NomVille")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Villes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AlimBio.Models.Entreprise", b =>
                {
                    b.HasOne("AlimBio.Models.Ville", null)
                        .WithMany("Entreprises")
                        .HasForeignKey("VilleId");
                });

            modelBuilder.Entity("AlimBio.Models.Message", b =>
                {
                    b.HasOne("AlimBio.Models.Salarie", "Salarie")
                        .WithMany()
                        .HasForeignKey("SalarieId");

                    b.Navigation("Salarie");
                });

            modelBuilder.Entity("AlimBio.Models.Salarie", b =>
                {
                    b.HasOne("AlimBio.Models.Entreprise", "Entreprise")
                        .WithMany("Salaries")
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("AlimBio.Models.Service", "Service")
                        .WithMany("Salaries")
                        .HasForeignKey("ServiceId");

                    b.HasOne("AlimBio.Models.Site", "Site")
                        .WithMany("Salaries")
                        .HasForeignKey("SiteId");

                    b.HasOne("AlimBio.Models.Ville", null)
                        .WithMany("Salaries")
                        .HasForeignKey("VilleId");

                    b.Navigation("Entreprise");

                    b.Navigation("Service");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("AlimBio.Models.Service", b =>
                {
                    b.HasOne("AlimBio.Models.Entreprise", "Entreprise")
                        .WithMany("Services")
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("AlimBio.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId");

                    b.Navigation("Entreprise");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("AlimBio.Models.Site", b =>
                {
                    b.HasOne("AlimBio.Models.Entreprise", "Entreprise")
                        .WithMany("Sites")
                        .HasForeignKey("EntrepriseId");

                    b.HasOne("AlimBio.Models.Ville", "Ville")
                        .WithMany("Sites")
                        .HasForeignKey("VilleId");

                    b.Navigation("Entreprise");

                    b.Navigation("Ville");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlimBio.Models.Entreprise", b =>
                {
                    b.Navigation("Salaries");

                    b.Navigation("Services");

                    b.Navigation("Sites");
                });

            modelBuilder.Entity("AlimBio.Models.Service", b =>
                {
                    b.Navigation("Salaries");
                });

            modelBuilder.Entity("AlimBio.Models.Site", b =>
                {
                    b.Navigation("Salaries");
                });

            modelBuilder.Entity("AlimBio.Models.Ville", b =>
                {
                    b.Navigation("Entreprises");

                    b.Navigation("Salaries");

                    b.Navigation("Sites");
                });
#pragma warning restore 612, 618
        }
    }
}
